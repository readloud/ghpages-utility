// Generated by CoffeeScript 2.6.1
(function() {
  /*
  Convert heading text into anchor link, using the algorithm from
  https://github.com/jch/html-pipeline/blob/master/lib/html/pipeline/toc_filter.rb
  as described in
  https://gist.github.com/asabaylus/3071099
  */
  /*
  HTML open tag regex from
  https://github.com/markdown-it/markdown-it/blob/df4607f1d4d4be7fdc32e71c04109aea8cc373fa/lib/common/html_re.js
  modified to capture tag name and attributes and their names and values.
  */
  var attr_name, attr_value, attribute, attribute_re, double_quoted, headingToAnchor, open_tag, open_tag_re, single_quoted, unquoted;

  headingToAnchor = function(heading, headings) {
    heading = heading.toLowerCase().replace(/[^\w\- ]/g, '').replace(/[ ]/g, '-');
    if (headings[heading]) {
      heading += `-${headings[heading]++}`;
    } else {
      headings[heading] = 1;
    }
    return heading;
  };

  attr_name = '([a-zA-Z_:][a-zA-Z0-9:._-]*)';

  unquoted = '([^"\'=<>`\\x00-\\x20]+)';

  single_quoted = "'([^']*)'";

  double_quoted = '"([^"]*)"';

  attr_value = `(?:${unquoted}|${single_quoted}|${double_quoted})`;

  attribute = `(?:\\s+${attr_name}(?:\\s*=\\s*${attr_value})?)`;

  open_tag = `<([A-Za-z][A-Za-z0-9\\-]*)(${attribute}*)\\s*\\/?>`;

  attribute_re = new RegExp(attribute, 'g');

  open_tag_re = new RegExp(open_tag);

  module.exports = {
    names: ['github-internal-links'],
    description: 'Check internal links like those generated by Github',
    tags: ['links'],
    function: function({name, tokens, config}, onError) {
      var anchor, attr_match, attributes, child, heading, headingLineNumber, headings, i, j, k, key, l, len, len1, len2, len3, lineNumber, links, ref, ref1, ref2, ref3, tag, tag_match, token, value;
      links = [];
      heading = null;
      headings = {};
      for (i = 0, len = tokens.length; i < len; i++) {
        token = tokens[i];
        switch (token.type) {
          case 'inline':
            ref = token.children;
            for (j = 0, len1 = ref.length; j < len1; j++) {
              child = ref[j];
              switch (child.type) {
                case 'link_open':
                  ref1 = child.attrs;
                  for (k = 0, len2 = ref1.length; k < len2; k++) {
                    [key, value] = ref1[k];
                    if (key === 'href' && (value != null ? value.startsWith('#') : void 0)) {
                      links.push({
                        anchor: value.slice(1),
                        lineNumber: child.lineNumber
                      });
                    }
                  }
                  break;
                case 'html_inline':
                  if (tag_match = open_tag_re.exec(child.content)) {
                    tag = tag_match[1].toLowerCase();
                    attributes = tag_match[2];
                    while (attr_match = attribute_re.exec(attributes)) {
                      key = attr_match[1].toLowerCase();
                      value = (ref2 = (ref3 = attr_match[2]) != null ? ref3 : attr_match[3]) != null ? ref2 : attr_match[4];
                      if ((key === 'id' || (key === 'name' && tag === 'a')) && value) {
                        headings[value] = 1;
                        if (config.verbose) {
                          console.log(`${name}:${token.lineNumber} github-internal-links #${value} = <${tag} ${key}>`);
                        }
                      }
                    }
                  }
                  break;
                case 'text':
                case 'code_inline':
                  if (heading != null) {
                    heading += child.content;
                  }
              }
            }
            break;
          case 'heading_open':
            heading = '';
            headingLineNumber = token.lineNumber;
            break;
          case 'heading_close':
            anchor = headingToAnchor(heading, headings);
            if (config.verbose) {
              console.log(`${name}:${headingLineNumber} github-internal-links #${anchor} = ${heading}`);
            }
            heading = null;
        }
      }
      for (l = 0, len3 = links.length; l < len3; l++) {
        ({anchor, lineNumber} = links[l]);
        if (!(anchor in headings)) {
          onError({
            lineNumber: lineNumber,
            detail: 'Internal anchor link does not match any heading',
            context: `#${anchor}`
          });
        } else if (config.verbose) {
          console.log(`${name}:${lineNumber} github-internal-links Link #${anchor} OK`);
        }
      }
      return void 0;
    }
  };

}).call(this);
